* 前端开发技巧或习惯

  
** 编程技巧

   - 数据与视图分离
   - 理解数据驱动视图，即便是1-2条数据，也用枚举循环，不直接写标签(如果你不是那么着急)
   - 尽量使用全局数据(对越做越大且常迭代的部分)
   - 通用组件放在component里，页面在index里，这样让自己代码更清晰，简单的说就是改 component里面的要小心，因为很多地方有引用
   - 使用配置的写法，不能像vue一样直接传递this上下文了，hook写法需要把props state属性分别一一传入
   - 组件封装 注意给形参缺省值 有入有出/形参设计最好预留一个参数做configuration，比如这里面可以添加callback在适当的时候调用一下
   - 组件封装 注意 考虑受控组件的情况(一般都是要受控的)
   - 算法方面 尽量使用第三方库，lodash，一般来说，自己写的都不咋地
   - 慎用缓存(数据流乱，非响应式)
   - useRef 不要用太多，感觉还没到那种非用不可的地步
   - 响应式的数据(不可变性) 深拷贝，扩展运算符，immutability-help
   - 感觉写着别扭请立即停止(刚开始写react可能会有这个问题，比如大家开始用useRef保存数据的时候。。)

** 调试技巧

   - 断点相关(xhr里获取异步代码堆栈)
   - 定位文件(vue devtool react devtool)
   - 二分调试
   - css调试
   - https://github.com/liriliri/eruda 移动端调试神器
   - 了解vue react源码，可以避免一些错误

** 搜索技巧

   - 科学上网
   - 不要使用疑问句  如何？怎么？行吗？
   - 只要关键词  (spring 搭建项目) 
   - site 站内搜索 site:github.com 关键字
   - 多习惯习惯英文
   - 访问相关社区

** 与后端协调技巧

   - bug属于后端还是前端的定位
   - 前端改好|后端改好|前后端改都可以的
     eg 假如有个查询接口，角色不同结果不同； 角色不同，默认的过滤参数不同;
   - 自己也学习一下后端和数据库相关的知识，了解为什么后端改这个地方可能会比较麻烦或者根本改不了
  
