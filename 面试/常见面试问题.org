1. 如何加快构建速度并压缩体积的

   - Webpack4 parallel开启多进程
   - cache-loader 放在做一些缓存
   - thread-loader 分开worker池
   - loader 设置include
   - 减少不用的loader使用，比如一些性能检查的loader
   - tree shaking开启，尽量使用es6 import ；lodash使用lodash-webpack-plugin来减少引入
   - 开启第三方库CDN
   - webpack-bundle-analyzer检查包体积大小

2. 前端架构注意点

   1. 代码托管：glab

   2. 代码检测eslint+prettier

   3. 自动化部署jenkins

   4. 线上错误报告 Sentry

   5. Yapi mock数据 根据文档生成对应modal

   6. js模块化，css module和sass结合

   7. git版本控制，提交规范

   8. 开发环境尽量linux windows可以用wsl

3. 如何管理前端team的

   1. 要有担当，勇于承担团队的问题，并找团队内相关成员解决问题

   2. 注重队员业务开发和自身开发 同时前进

   3. 针对不同的人制定不同的工作和学习方案

   4. 关心团队结构，即便是几人的团队，也要有梯度的，并且尽量不出现单个女生的情况，至少2个

   5. 活跃团队氛围，不管是学习氛围还是娱乐氛围

4. 前端技术选型要点

   1. 业务角度
      
      比如知识快速搭建并且只用于大屏展示，用vue构建项目较快，且不用学习过多的生态知识,并且使用简单，双向绑定+模板指令；
      React更加灵活（更适合大型应用） ：为什么？
      1. jsx 2.函数式编程（高阶函数，不可变数据，纯函数）3. 更容易组合相比mixin
            
   2. 团队角度
      看看团队内成员有多少个可以迅速上手，是否影响工作进度
      ts是否需要，新手对ts的理解
      技术对团队成员是否有学习作用

5. 碰到过哪些问题

   1. cshtml更新li后需要再绑定事件，比较麻烦，后来使用ul做事件委托

   2. 很多时候调试bug是需要考猜的，因为当时可能不懂原理，或者比较诡异说不清楚；
      但是猜也需要方法和技巧的，最笨最原始的方法就是注释法，类似于二分排除
      1. app内h5打印分页问题
      2. elementui 表格加载更多问题

   3. echarts 桑基图背景色的问题
      查文档(没有)=>
      百度(基本都是echart的用法，没有具体到某个图形的)=>
      问同事（不会）=>
      看issue(没有相关)=>
      看源码（找到问题）=>
      发issue

   4. 通用组件开发
      考虑哪些地方需要预留callback或者钩子，想象未来同事写代码时候这里需要做特殊处理
      和产品沟通这些地方会不会经常变动
      考虑更新后的兼容问题，组件api更新了要保留原属性和方法

6. 

7. 

8. 

9. 


